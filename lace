class Solution {
    public String searchMatchStr1(String s, int mid) {
        String ret = String.valueOf(s.charAt(mid));
        int length = mid > s.length() - 1 - mid ? s.length()-1-mid : mid;
        System.out.println("length: " + length);
        for (int i = 0; i < length; i++) {
            System.out.println(mid - i - 1);
            System.out.println(mid + i + 1);
            if (s.charAt(mid - i - 1) == s.charAt(mid + i + 1))
                ret = s.substring(mid - i - 1, mid + i + 2);
            else
                break;
        }
        return ret;
    }
    public String searchMatchStr2(String s, int left, int right) {
        String ret = "";
        int length = left > (s.length() - 1 - right) ? (s.length() - 1 - right) : left;
        for (int i = 0; i <= length; i++) {
            if (s.charAt(left-i) == s.charAt(right+i))
                ret = s.substring(left-i, right + i + 1);
            else
                break;
        }
        return ret;
    }
    public String longestPalindrome(String s) {
        String ret1 = "";
        String ret2 = "";
        int mid = 0;
        if (s.length() <= 1)
            return s;
        if (s.length() % 2 == 0) {
            mid = s.length() / 2 - 1;
        } else
            mid = s.length() / 2;
        System.out.println(mid);

        for (int i = mid; i < s.length(); i++) {
            String tmp1 = searchMatchStr1(s, i);
            if (ret1.length() < tmp1.length())
                ret1 = tmp1;
            String tmp2 = searchMatchStr2(s, i, i+1);
            if (ret2.length() < tmp2.length())
                ret2 = tmp2;
        }
        for (int i = mid; i > -1; i--) {
            String tmp1 = searchMatchStr1(s, i);
            if (ret1.length() < tmp1.length())
                ret1 = tmp1;
            String tmp2 = searchMatchStr2(s, i, i+1);
            if (ret2.length() < tmp2.length())
                ret2 = tmp2;
        }
        return ret1.length()>ret2.length()?ret1:ret2;

    }
}
